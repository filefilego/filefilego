syntax = "proto3";
package messages;

import "transaction/transaction.proto";
import "block/block.proto";

option go_package = "github.com/filefilego/filefilego/node/protocols/messages";

// GossipPayload represents a gossip payload.
message GossipPayload {
    oneof message {
        ProtoBlocks blocks = 1;
        transaction.ProtoTransaction transaction = 2;
        DataQueryRequestProto query = 3;
        StorageQueryRequestProto storage_query = 4;
    }
}

// ProtoBlocks is the proto representation of blocks envelope.
message ProtoBlocks {
    repeated block.ProtoBlock blocks = 1;
}

// StorageQueryRequestProto represents a storage query message.
message StorageQueryRequestProto {
    string from_peer_addr = 1;
    string preferred_location = 2;
}

// StorageQueryResponseProto represents a storage response message.
message StorageQueryResponseProto {
    string storage_provider_peer_addr = 1;
    string location = 2;
    string fees_per_byte = 3;
    bytes public_key = 4;
    bytes hash = 5;
    bytes signature = 6;
    int64 uptime = 7;
    int64 system_uptime = 8;
    uint64 storage_capacity = 9;
    string platform = 10;
    bool allow_fees_override = 11;
}

// StorageFileUploadMetadataProto represents a file's name and associated channel node item hash.
message StorageFileUploadMetadataProto {
    string file_name = 1;
    string fees_per_byte = 2;
    // public_key_owner is the owner's public key
    bytes public_key_owner = 3;
}

// DataQueryRequestProto represents a data query message.
message DataQueryRequestProto {
    repeated bytes file_hashes = 1;
    string from_peer_addr = 2;
    bytes hash = 3;
    int64 timestamp = 4;
}

// DataQueryResponseProto represents a data query response.
message DataQueryResponseProto {
    string from_peer_addr = 1;
    string fees_per_byte = 2;
    // hash_data_query_request must be same as the DataQueryRequestProto hash
    bytes hash_data_query_request = 3;
    bytes public_key = 4;
    bytes signature = 5;
    repeated bytes file_hashes = 6;
    // file_hashes_sizes contains the file sizes of each hash in file_hashes.
    repeated uint64 file_hashes_sizes = 7;
    repeated bytes unavailable_file_hashes = 8;
    int64 timestamp = 9;
    repeated string file_names = 10;
    repeated bytes file_merkle_root_hashes = 11;
    // file_fees_per_byte with the introduction of dynamic pricing this field is used to indicate fees for each file.
    repeated string file_fees_per_byte = 12;
}

// DataQueryResponseTransferProto is used to request a data query response from a verifier.
message DataQueryResponseTransferProto {
    bytes hash = 1;
}

// DataQueryResponseTransferResultProto encapsulates multiple data query responses from verifier to the querying node.
message DataQueryResponseTransferResultProto {
    repeated DataQueryResponseProto responses = 1;
}

// BlockchainHeightResponseProto represents the height of a node's blockchain.
message BlockchainHeightResponseProto {
    uint64 height = 1;
}

// BlockDownloadRequestProto represents a block download request range.
message BlockDownloadRequestProto {
    uint64 from = 1;
    uint64 to = 2;
}

// BlockDownloadResponseProto represents a block download response.
message BlockDownloadResponseProto {
    uint64 from = 1;
    uint64 to = 2;
    bool error = 3;
    uint64 node_height = 4;
    repeated block.ProtoBlock blocks = 5;
}

// DownloadContractProto represents a download contract.
message DownloadContractProto {
    DataQueryResponseProto file_hoster_response = 1;
    bytes file_requester_node_public_key = 2;
    repeated bytes file_hashes_needed = 3;
    // file_hashes_sizes contains the file sizes of each hash in file_hashes.
    repeated uint64 file_hashes_needed_sizes = 4;
    bytes verifier_public_key = 5;
    string verifier_fees = 6;
    bytes contract_hash = 7;
    bytes verifier_signature = 8;
}

// DownloadContractInTransactionDataProto is a contract metadata with the smallest fingerprint.
message DownloadContractInTransactionDataProto {
    bytes contract_hash = 1;
    bytes file_requester_node_public_key = 2;
    bytes file_hoster_node_public_key = 3;
    bytes verifier_public_key = 4;
    string verifier_fees = 5;
    string file_hoster_total_fees = 6;
}

// DownloadContractsHashesProto contains a list of contracts hashes which will be send as a transaction data payload.
message DownloadContractsHashesProto {
    repeated DownloadContractInTransactionDataProto contracts = 1;
}

// MerkleTreeNodesOfFileContractProto is a message which contains a list of merkle tree nodes, contract and file hashes.
message MerkleTreeNodesOfFileContractProto {
    bytes contract_hash = 1;
    bytes file_hash = 2;
    repeated bytes merkle_tree_nodes = 3;
}

// KeyIVProto is a message that represents a data encryption payload request to verifier node.
message KeyIVProto {
    bytes contract_hash = 1;
    bytes file_hash = 2;
    bytes file_merkle_root_hash = 3;
}

// KeyIVRequestProto is a message that represents a list of data encryption payloads to verifier node.
message KeyIVRequestsProto {
    repeated KeyIVProto key_ivs = 1;
}

// KeyIVRandomizedFileSegmentsEnvelopeProto is a list of KeyIVRandomizedFileSegmentsProto to be sent to the file requester all together.
message KeyIVRandomizedFileSegmentsEnvelopeProto {
    repeated KeyIVRandomizedFileSegmentsProto key_iv_randomized_file_segments = 1;
}

// KeyIVRandomizedFileSegmentsProto is a message which contains the private key, the iv, encryption type and randomized order of segments and the raw unencrypted data size.
// this message is sent from the file hoster to the verifier.
// this message should be written to the netowrk stream and after read
// the total_size_raw_unencrypted_segments number of bytes
message KeyIVRandomizedFileSegmentsProto {
    uint64 file_size = 1;
    bytes contract_hash = 2;
    bytes file_hash = 3;
    bytes key = 4;
    bytes iv = 5;
    bytes merkle_root_hash = 6;
    int32 encryption_type = 7;
    repeated int32 randomized_segments = 8;
    uint64 total_size_raw_unencrypted_segments = 9;
    string error = 10;
}

// FileTransferInfoProto is a message which includes the contract hash, file hash and the size of the file.
// this message is a request payload from file downloader node to file hoster node.
// when this message is received, it should start writing to the network stream the data which is encrypted
// and cut into shuffled segments
message FileTransferInfoProto {
    bytes contract_hash = 1;
    bytes file_hash = 2;
    uint64 file_size = 3;
    // from indicates the starting file byte range to be requested
    int64 from = 4;
    // to indicates the end of the file byte range to be requested
    int64 to = 5;
}

// StorageCapabilitiesProto is a response of a storage node containing
// the configuration of the storage node.
message StorageCapabilitiesProto {
    bool allow_fees_override = 1;
    string fees_per_byte = 2;
    int64 uptime = 3;
    string platform = 4;
    uint64 storage_capacity = 5;
}