// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package rpc is a generated GoMock package.
package rpc

import (
	context "context"
	reflect "reflect"
	time "time"

	keystore "github.com/filefilego/filefilego/keystore"
	messages "github.com/filefilego/filefilego/node/protocols/messages"
	storage "github.com/filefilego/filefilego/node/protocols/storage"
	storage0 "github.com/filefilego/filefilego/storage"
	gomock "github.com/golang/mock/gomock"
	peer "github.com/libp2p/go-libp2p/core/peer"
	peerstore "github.com/libp2p/go-libp2p/core/peerstore"
	multiaddr "github.com/multiformats/go-multiaddr"
)

// MockPeerstore is a mock of Peerstore interface.
type MockPeerstore struct {
	ctrl     *gomock.Controller
	recorder *MockPeerstoreMockRecorder
}

// MockPeerstoreMockRecorder is the mock recorder for MockPeerstore.
type MockPeerstoreMockRecorder struct {
	mock *MockPeerstore
}

// NewMockPeerstore creates a new mock instance.
func NewMockPeerstore(ctrl *gomock.Controller) *MockPeerstore {
	mock := &MockPeerstore{ctrl: ctrl}
	mock.recorder = &MockPeerstoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeerstore) EXPECT() *MockPeerstoreMockRecorder {
	return m.recorder
}

// Addrs mocks base method.
func (m *MockPeerstore) Addrs(arg0 peer.ID) []multiaddr.Multiaddr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Addrs", arg0)
	ret0, _ := ret[0].([]multiaddr.Multiaddr)
	return ret0
}

// Addrs indicates an expected call of Addrs.
func (mr *MockPeerstoreMockRecorder) Addrs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Addrs", reflect.TypeOf((*MockPeerstore)(nil).Addrs), arg0)
}

// MockHost is a mock of Host interface.
type MockHost struct {
	ctrl     *gomock.Controller
	recorder *MockHostMockRecorder
}

// MockHostMockRecorder is the mock recorder for MockHost.
type MockHostMockRecorder struct {
	mock *MockHost
}

// NewMockHost creates a new mock instance.
func NewMockHost(ctrl *gomock.Controller) *MockHost {
	mock := &MockHost{ctrl: ctrl}
	mock.recorder = &MockHostMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHost) EXPECT() *MockHostMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockHost) ID() peer.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(peer.ID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockHostMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockHost)(nil).ID))
}

// Peerstore mocks base method.
func (m *MockHost) Peerstore() peerstore.Peerstore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peerstore")
	ret0, _ := ret[0].(peerstore.Peerstore)
	return ret0
}

// Peerstore indicates an expected call of Peerstore.
func (mr *MockHostMockRecorder) Peerstore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peerstore", reflect.TypeOf((*MockHost)(nil).Peerstore))
}

// MockKeyLockUnlockLister is a mock of KeyLockUnlockLister interface.
type MockKeyLockUnlockLister struct {
	ctrl     *gomock.Controller
	recorder *MockKeyLockUnlockListerMockRecorder
}

// MockKeyLockUnlockListerMockRecorder is the mock recorder for MockKeyLockUnlockLister.
type MockKeyLockUnlockListerMockRecorder struct {
	mock *MockKeyLockUnlockLister
}

// NewMockKeyLockUnlockLister creates a new mock instance.
func NewMockKeyLockUnlockLister(ctrl *gomock.Controller) *MockKeyLockUnlockLister {
	mock := &MockKeyLockUnlockLister{ctrl: ctrl}
	mock.recorder = &MockKeyLockUnlockListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyLockUnlockLister) EXPECT() *MockKeyLockUnlockListerMockRecorder {
	return m.recorder
}

// Authorized mocks base method.
func (m *MockKeyLockUnlockLister) Authorized(jwtToken string) (bool, keystore.UnlockedKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorized", jwtToken)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(keystore.UnlockedKey)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Authorized indicates an expected call of Authorized.
func (mr *MockKeyLockUnlockListerMockRecorder) Authorized(jwtToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorized", reflect.TypeOf((*MockKeyLockUnlockLister)(nil).Authorized), jwtToken)
}

// MockStorageProtocol is a mock of StorageProtocol interface.
type MockStorageProtocol struct {
	ctrl     *gomock.Controller
	recorder *MockStorageProtocolMockRecorder
}

// MockStorageProtocolMockRecorder is the mock recorder for MockStorageProtocol.
type MockStorageProtocolMockRecorder struct {
	mock *MockStorageProtocol
}

// NewMockStorageProtocol creates a new mock instance.
func NewMockStorageProtocol(ctrl *gomock.Controller) *MockStorageProtocol {
	mock := &MockStorageProtocol{ctrl: ctrl}
	mock.recorder = &MockStorageProtocolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageProtocol) EXPECT() *MockStorageProtocolMockRecorder {
	return m.recorder
}

// GetCancelFileUploadStatus mocks base method.
func (m *MockStorageProtocol) GetCancelFileUploadStatus(peerID peer.ID, filePath string) (bool, context.CancelFunc) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCancelFileUploadStatus", peerID, filePath)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(context.CancelFunc)
	return ret0, ret1
}

// GetCancelFileUploadStatus indicates an expected call of GetCancelFileUploadStatus.
func (mr *MockStorageProtocolMockRecorder) GetCancelFileUploadStatus(peerID, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCancelFileUploadStatus", reflect.TypeOf((*MockStorageProtocol)(nil).GetCancelFileUploadStatus), peerID, filePath)
}

// GetDiscoveredStorageProviders mocks base method.
func (m *MockStorageProtocol) GetDiscoveredStorageProviders() []storage.ProviderWithCountry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscoveredStorageProviders")
	ret0, _ := ret[0].([]storage.ProviderWithCountry)
	return ret0
}

// GetDiscoveredStorageProviders indicates an expected call of GetDiscoveredStorageProviders.
func (mr *MockStorageProtocolMockRecorder) GetDiscoveredStorageProviders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscoveredStorageProviders", reflect.TypeOf((*MockStorageProtocol)(nil).GetDiscoveredStorageProviders))
}

// GetStorageCapabilities mocks base method.
func (m *MockStorageProtocol) GetStorageCapabilities(ctx context.Context, peerID peer.ID) (*messages.StorageCapabilitiesProto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageCapabilities", ctx, peerID)
	ret0, _ := ret[0].(*messages.StorageCapabilitiesProto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageCapabilities indicates an expected call of GetStorageCapabilities.
func (mr *MockStorageProtocolMockRecorder) GetStorageCapabilities(ctx, peerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageCapabilities", reflect.TypeOf((*MockStorageProtocol)(nil).GetStorageCapabilities), ctx, peerID)
}

// GetUploadProgress mocks base method.
func (m *MockStorageProtocol) GetUploadProgress(peerID peer.ID, filePath string) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploadProgress", peerID, filePath)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUploadProgress indicates an expected call of GetUploadProgress.
func (mr *MockStorageProtocolMockRecorder) GetUploadProgress(peerID, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadProgress", reflect.TypeOf((*MockStorageProtocol)(nil).GetUploadProgress), peerID, filePath)
}

// ResetProgressAndCancelStatus mocks base method.
func (m *MockStorageProtocol) ResetProgressAndCancelStatus(peerID peer.ID, filePath string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetProgressAndCancelStatus", peerID, filePath)
}

// ResetProgressAndCancelStatus indicates an expected call of ResetProgressAndCancelStatus.
func (mr *MockStorageProtocolMockRecorder) ResetProgressAndCancelStatus(peerID, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetProgressAndCancelStatus", reflect.TypeOf((*MockStorageProtocol)(nil).ResetProgressAndCancelStatus), peerID, filePath)
}

// SendDiscoveredStorageTransferRequest mocks base method.
func (m *MockStorageProtocol) SendDiscoveredStorageTransferRequest(ctx context.Context, peerID peer.ID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDiscoveredStorageTransferRequest", ctx, peerID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendDiscoveredStorageTransferRequest indicates an expected call of SendDiscoveredStorageTransferRequest.
func (mr *MockStorageProtocolMockRecorder) SendDiscoveredStorageTransferRequest(ctx, peerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDiscoveredStorageTransferRequest", reflect.TypeOf((*MockStorageProtocol)(nil).SendDiscoveredStorageTransferRequest), ctx, peerID)
}

// SetCancelFileUpload mocks base method.
func (m *MockStorageProtocol) SetCancelFileUpload(peerID peer.ID, filePath string, cancelled bool, cancel context.CancelFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCancelFileUpload", peerID, filePath, cancelled, cancel)
}

// SetCancelFileUpload indicates an expected call of SetCancelFileUpload.
func (mr *MockStorageProtocolMockRecorder) SetCancelFileUpload(peerID, filePath, cancelled, cancel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCancelFileUpload", reflect.TypeOf((*MockStorageProtocol)(nil).SetCancelFileUpload), peerID, filePath, cancelled, cancel)
}

// SetUploadingStatus mocks base method.
func (m *MockStorageProtocol) SetUploadingStatus(peerID peer.ID, filePath, fileHash string, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUploadingStatus", peerID, filePath, fileHash, err)
}

// SetUploadingStatus indicates an expected call of SetUploadingStatus.
func (mr *MockStorageProtocolMockRecorder) SetUploadingStatus(peerID, filePath, fileHash, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUploadingStatus", reflect.TypeOf((*MockStorageProtocol)(nil).SetUploadingStatus), peerID, filePath, fileHash, err)
}

// TestSpeedWithRemotePeer mocks base method.
func (m *MockStorageProtocol) TestSpeedWithRemotePeer(ctx context.Context, peerID peer.ID, fileSize uint64) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestSpeedWithRemotePeer", ctx, peerID, fileSize)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestSpeedWithRemotePeer indicates an expected call of TestSpeedWithRemotePeer.
func (mr *MockStorageProtocolMockRecorder) TestSpeedWithRemotePeer(ctx, peerID, fileSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestSpeedWithRemotePeer", reflect.TypeOf((*MockStorageProtocol)(nil).TestSpeedWithRemotePeer), ctx, peerID, fileSize)
}

// UploadFileWithMetadata mocks base method.
func (m *MockStorageProtocol) UploadFileWithMetadata(ctx context.Context, peerID peer.ID, filePath string, publicKeyOwner []byte, feesPerByte string) (storage0.FileMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFileWithMetadata", ctx, peerID, filePath, publicKeyOwner, feesPerByte)
	ret0, _ := ret[0].(storage0.FileMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFileWithMetadata indicates an expected call of UploadFileWithMetadata.
func (mr *MockStorageProtocolMockRecorder) UploadFileWithMetadata(ctx, peerID, filePath, publicKeyOwner, feesPerByte interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFileWithMetadata", reflect.TypeOf((*MockStorageProtocol)(nil).UploadFileWithMetadata), ctx, peerID, filePath, publicKeyOwner, feesPerByte)
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// DeleteFileFromDB mocks base method.
func (m *MockStorage) DeleteFileFromDB(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileFromDB", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFileFromDB indicates an expected call of DeleteFileFromDB.
func (mr *MockStorageMockRecorder) DeleteFileFromDB(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileFromDB", reflect.TypeOf((*MockStorage)(nil).DeleteFileFromDB), key)
}

// ExportFiles mocks base method.
func (m *MockStorage) ExportFiles() ([]storage0.FileMetadataWithDBKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportFiles")
	ret0, _ := ret[0].([]storage0.FileMetadataWithDBKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportFiles indicates an expected call of ExportFiles.
func (mr *MockStorageMockRecorder) ExportFiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportFiles", reflect.TypeOf((*MockStorage)(nil).ExportFiles))
}

// GetFileMetadata mocks base method.
func (m *MockStorage) GetFileMetadata(fileHash, peerID string) (storage0.FileMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileMetadata", fileHash, peerID)
	ret0, _ := ret[0].(storage0.FileMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileMetadata indicates an expected call of GetFileMetadata.
func (mr *MockStorageMockRecorder) GetFileMetadata(fileHash, peerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileMetadata", reflect.TypeOf((*MockStorage)(nil).GetFileMetadata), fileHash, peerID)
}

// ImportFiles mocks base method.
func (m *MockStorage) ImportFiles(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportFiles", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportFiles indicates an expected call of ImportFiles.
func (mr *MockStorageMockRecorder) ImportFiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportFiles", reflect.TypeOf((*MockStorage)(nil).ImportFiles), arg0)
}

// ListFiles mocks base method.
func (m *MockStorage) ListFiles(currentPage, pageSize int, order string) ([]storage0.FileMetadataWithDBKey, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", currentPage, pageSize, order)
	ret0, _ := ret[0].([]storage0.FileMetadataWithDBKey)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockStorageMockRecorder) ListFiles(currentPage, pageSize, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockStorage)(nil).ListFiles), currentPage, pageSize, order)
}

// SaveFileMetadata mocks base method.
func (m *MockStorage) SaveFileMetadata(fileHash, peerID string, metadata storage0.FileMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFileMetadata", fileHash, peerID, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFileMetadata indicates an expected call of SaveFileMetadata.
func (mr *MockStorageMockRecorder) SaveFileMetadata(fileHash, peerID, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFileMetadata", reflect.TypeOf((*MockStorage)(nil).SaveFileMetadata), fileHash, peerID, metadata)
}
